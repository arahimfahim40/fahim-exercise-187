/* Created by: Abdul Rahim
 * Date of creation: 12/02/2020
 * Course: CPT 187
 * Purpose: The purpose of this Order Program is 
 * to shop for you and calculate the purchase of an
 * item or group of item with tax added and 
 * discount deducted automatically, and at 
 * the end a receipt is printed and written to a file.
 * */

package edu.cpt187.fahim.exercise6;

//import scanner
import java.util.Scanner;


//main class
public class MainClass 
{
	
	//MAINCLASS CONSTANTS with CLASS SCOPE
	public static final char[] MENU_CHARS = {'A','B','Q'};
	public static final String[] MENU_OPTIONS = {"Login","Create An Account", "Quit"};
	public static final char[] FILE_MENU_CHARS= {'A','B', 'R'};
	public static final String[] FILE_MENU_OPTIONS = {"Load Inventory","Create Order","Return to Main Menu"};
	public static final char[] SUB_MENU_CHARS= {'A','B','C','D'};
	public static final String INVENTORY_FILE_NAME = "MasterInventoryFile.dat";
	public static final String ACCOUNTS_FILE_NAME = "MasterUserFile.dat";
	
	//main class method
	public static void main(String[] args) 
	{
		//declaring and initializing variables and constants
		Scanner input = new Scanner (System.in);
		
		//local variables
		String userName = "";
		char menuSelection = ' ';
		
		//instance of Order object
		Order currentOrder = new Order();
		//instance of Inventory object
		Inventory currentInventory = new Inventory();
		//write order instance
		WriteOrder orders = new WriteOrder(INVENTORY_FILE_NAME);
		//write currentUser instance
		UserAccounts currentUser = new UserAccounts(ACCOUNTS_FILE_NAME);
		
		//display welcome banner
		displayWelcomeBanner();
		
		//menu selection 
		menuSelection = validateMenuSelection(input);
		
		//while not quit
		while (menuSelection != 'Q') 
		{
			//set user account arrays
			currentUser.setUserAccountArrays();
			
			//assign userName
			userName = getUserName(input);
			
			//selection structure to check for menuSelection
			if (menuSelection != 'A') 
			{
				//set searched index for user names
				currentUser.setSearchedIndex(userName);
				
				//selection structure to check for current user
				if (currentUser.getSearchedIndex() >= 0) 
				{
					//display account results
					displayAccountResults(userName);
				}
				else 
				{
					//set write one record
					currentUser.setWriteOneRecord(userName, getPassword(input));
					//display account results
					displayAccountResults();
				}//end of selection structure
			}
			else 
			{
				//setting searched index
				currentUser.setSearchedIndex(userName, getPassword(input));
				
				//selection structure for getSearchedIndex
				if (currentUser.getSearchedIndex() < 0) 
				{
					//display login error
					displayLoginError();
				}
				else 
				{
					//assigning menu selection
					menuSelection = validateFileSelection(input);
					
					//while loop to check for menuSelection
					while(menuSelection!= 'R') 
					{
						//selection structure to check for menu selection
						if (menuSelection == 'A') 
						{
							//set load item for current inventory
							currentInventory.setLoadItems(getFileName(input));
							//selection structure to check for record count
							if (currentInventory.getRecordCount() <= 0) 
							{
								//display not open
								displayNotOpen();
							}
							else 
							{
								//display record report
								displayRecordReport(currentInventory.getRecordCount());
							}//end of if else statement
						}
						else 
						{
							//setting search index
							currentInventory.setSearchIndex(validateSearchValue(input));
							
							//selection structure to check for search index
							if (currentInventory.getItemSearchIndex() < 0) 
							{
								//display not found
								displayNotFound();
							}//end of if
							else 
							{
								//item selection menu
								currentOrder.setLastItemSelectedIndex(currentInventory.getItemSearchIndex());
								
								//set item id
								currentOrder.setItemID(currentInventory.getItemIDs());
								
								//set item names for current order
								currentOrder.setItemName(currentInventory.getItemNames());
								
								//set prices for current order
								currentOrder.setItemPrice(currentInventory.getItemPrices());
								
								//set quantity for current order
								currentOrder.setHowMany(validateHowMany(input));
								
								//selection structure to check for instock count
								if (currentOrder.getInStockCount(currentInventory.getInStockCounts()) < currentOrder.getHowMany()) 
								{//display out of stock
									displayOutOfStock();
								}
								else 
								{
									//set discount type
									currentOrder.setDiscountType(validateDiscountMenu(input,currentInventory.getDiscountNames(), currentInventory.getDiscountRates()));
									
									//set discount name
									currentOrder.setDiscountName(currentInventory.getDiscountNames());
									
									//set discount rate
									currentOrder.setDiscountRate(currentInventory.getDiscountRates());
									
									//set decrease in stock
									currentOrder.setDecreaseInStock(currentInventory);
									
									//set prize name
									currentOrder.setPrizeName(currentInventory.getPrizeNames(), currentInventory.getRandomNumber());
									
									//write the order to a file
									orders.setWriteOrder(currentOrder.getItemID(), currentOrder.getItemName(), currentOrder.getItemPrice(), currentOrder.getHowMany(), currentOrder.getTotalCost());
									
									//selection structure to check for discount rate
									if (currentOrder.getDiscountRate() > 0.0) 
									{
										//display order report
										displayOrderReport(userName,currentOrder.getItemName(), currentOrder.getItemPrice(), currentOrder.getHowMany(),currentOrder.getDiscountName(),currentOrder.getDiscountRate(),currentOrder.getDiscountAmt(),currentOrder.getDiscountPrice(),currentOrder.getSubTotal(),currentOrder.getTaxRate(), currentOrder.getTaxAmt(),currentOrder.getTotalCost(),currentOrder.getPrizeName(),currentOrder.getInStockCount( currentInventory.getInStockCounts()));
									}
									else 
									{
										displayOrderReport(userName, currentOrder.getItemName(), currentOrder.getItemPrice(), currentOrder.getHowMany(),currentOrder.getSubTotal(), currentOrder.getTaxRate(), currentOrder.getTaxAmt(), currentOrder.getTotalCost(), currentOrder.getPrizeName(),currentOrder.getInStockCount( currentInventory.getInStockCounts()));
									}//end of else
								}//end of else
							}//end of if else statement
						}//end of if else statement
						menuSelection = validateFileSelection(input);
					}//end of while loop
				}//end of if else statement
			}//end of if else statement

			
			//display menu selection
			menuSelection = validateMenuSelection(input);
			
			
		}//end of while loop
		
		//set load items
		currentInventory.setLoadItems(orders.getFileName(), orders.getRecordCount());
		
		//selection structure to check total cost
		if (orders.getRecordCount() > 0) 
		{
			//display final report
			displayFinalReport(currentInventory.getItemIDs(), currentInventory.getItemNames(), currentInventory.getItemPrices() , currentInventory.getOrderQuantities(), currentInventory.getOrderTotals(), currentInventory.getRecordCount(), currentInventory.getGrandTotal());		
		}	
		//farewell message
		displayFarewellMessage();
		
		//close scanner
		input.close();

	}//end of main method
	
	//void methods
	//display welcome banner
	public static void displayWelcomeBanner() 
	{
		//displaying welcome banner
		System.out.println("Welcome to Order store,");
		System.out.println("this program will allow you\nto create an account, load inventory,\nand then buy your desired items,");
		System.out.println("and at the end a receipt will be printed \nwith your total payment with discount and tax.");
		//extra space
		System.out.println("");
		
	}//end of welcome banner method
	
	//display farewell banner
	public static void displayFarewellMessage() 
	{
		//displaying farewell banner
		System.out.println("\nThank you for coming to our store,");
		System.out.println("we wish you a great rest of the day");
		System.out.println("and hope that you come back soon!");
		
	}//end of farewell banner method
	
	//displaying Main Menu method
	public static void displayMainMenu() 
	{
		//local index variable
		int localIndex = 0;
		//displaying main menu title
		System.out.println("MAIN MENU");
		//while loop to run through array
		while (localIndex < MENU_OPTIONS.length) 
		{
			//display the main menu
			System.out.printf("%-2s%-4s%s\n",MENU_CHARS[localIndex],"for",MENU_OPTIONS[localIndex]);
			localIndex++;
		}//end of while loop to print
		
		//display prompt
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("Enter your selection here: ");
	}//end of main menu method
	
	//displaying file selection
	public static void displayFileSelection() 
	{
		//local index variable
		int localIndex = 0;
		//displaying main menu title
		System.out.println("FILE MENU");
		//while loop to run through array
		while (localIndex < FILE_MENU_OPTIONS.length) 
		{
			//display the main menu
			System.out.printf("%-2s%-4s%s\n",FILE_MENU_CHARS[localIndex],"for",FILE_MENU_OPTIONS[localIndex]);
			localIndex++;
		}//end of while loop to print
		
		//display prompt
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("Enter your selection here: ");
	}//end of file selection method
	
	//start of display discount menu method
	public static void displayDiscountMenu (String[] borrowedDiscountNames, double[] borrowedDiscountRates) 
	{
		//declare and initialize local counter variable
		int localIndex = 0;
		
		//extra space
		System.out.println("");
		//title
		System.out.println("DISCOUNT MENU");

		//while loop to print menu and access array
		while (localIndex < borrowedDiscountNames.length) 
		{
			//display menu
			System.out.printf("%-2s%-4s%-26s%6.1f%3s\n", SUB_MENU_CHARS[localIndex],"for",borrowedDiscountNames[localIndex],borrowedDiscountRates[localIndex]*100,"%");
			//increment
			localIndex++;
		}
		//prompt
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("Please make selection here: ");
		
	}//end of display discount menu
	
	//start of display order report method
	public static void displayOrderReport(String borrowedUserName, String borrowedItemName, double borrowedItemPrice, int borrowedHowMany, String borrowedDiscountName, double borrowedDiscountRate, double borrowedDiscountAmt, double borrowedDiscountPrice, double borrowedSubTotal, double borrowedTaxRate, double borrowedTaxAmt, double borrowedTotalCost, String borrowedPrizeName, int borrowedInStockCount)
	{
		//title
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("ORDER REPORT");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		//formatting outputs
		System.out.printf("%-30s%s\n\n", "Customer Name:",borrowedUserName);
		System.out.printf("%-30s%s", "Item Name:",borrowedItemName);
		System.out.printf("\n%-30s%-3s%6.2f", "Item Price:","$",borrowedItemPrice);
		System.out.printf("\n\n%-30s%s", "Discount Name:",borrowedDiscountName);
		System.out.printf("\n%-32s%6.1f%3s", "Discount Rate:",borrowedDiscountRate*100,"%");
		System.out.printf("\n%-30s%-3s%6.2f", "Discount Amount:","$",borrowedDiscountAmt);
		System.out.printf("\n%-30s%-3s%6.2f", "Discount Price:","$",borrowedDiscountPrice);
		System.out.printf("\n\n%-30s%9d", "Quantity:",borrowedHowMany);
		System.out.printf("\n\n%-30s%-3s%6.2f", "Subtotal:","$",borrowedSubTotal);
		System.out.printf("\n%-32s%6.1f%3s", "Tax Rate:",borrowedTaxRate*100,"%");
		System.out.printf("\n%-30s%-3s%6.2f", "Tax Amount","$",borrowedTaxAmt);
		System.out.printf("\n\n%-30s%-3s%6.2f\n\n", "Order Total","$",borrowedTotalCost);
		System.out.printf("%-30s%s\n\n", "Prize:",borrowedPrizeName);
		System.out.println("Buy more now: Only "+borrowedInStockCount+"  "+borrowedItemName+"s left in-stock!\n\n");

		
	}//end of order report method
	
	//display order report overload method without discount
	public static void displayOrderReport(String borrowedUserName, String borrowedItemName, double borrowedItemPrice, int borrowedHowMany, double borrowedSubTotal, double borrowedTaxRate, double borrowedTaxAmt, double borrowedTotalCost, String borrowedPrizeName, int borrowedInStockCount) 
	{
		//title
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("ORDER REPORT");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		
		//formatting outputs
		System.out.printf("%-30s%s\n\n", "Customer Name:",borrowedUserName);
		System.out.printf("%-30s%s", "Item Name:",borrowedItemName);
		System.out.printf("\n%-30s%-3s%6.2f", "Item Price:","$",borrowedItemPrice);
		System.out.printf("\n\n%-30s%9d", "Quantity:",borrowedHowMany);
		System.out.printf("\n\n%-30s%-3s%6.2f", "Subtotal:","$",borrowedSubTotal);
		System.out.printf("\n%-32s%6.1f%3s", "Tax Rate:",borrowedTaxRate*100,"%");
		System.out.printf("\n\n%-30s%-3s%6.2f\n\n", "Order Total","$",borrowedTotalCost);
		System.out.printf("%-30s%s\n\n", "Prize:",borrowedPrizeName);	
		System.out.println("Buy more now: Only "+borrowedInStockCount+""+borrowedItemName+"s left in-stock!");
	}
	
	//start of display final report
	public static void displayFinalReport (int[] borrowedItemIDs,String[] borrowedItemNames,double[] borrowedItemPrices,int[] borrowedOrderQuantities,double[] borrowedOrderTotals,int borrowedRecordCount, double borrowedGrandTotal) 
	{	
		//declaring and initializing local index
		int localIndex = 0;
		
		//title
		System.out.println("~~~ ~~~ ~~~ ~~~ ~~~ ~~~ ~~~ ~~~ ~~~ ~~~ ~~~ ~~~ ~~~");
		System.out.println("FINAL REPORT");
		System.out.println("~~~ ~~~ ~~~ ~~~ ~~~ ~~~ ~~~ ~~~ ~~~ ~~~ ~~~ ~~~ ~~~");
		
		//print the report
		System.out.printf("%-4s%-24s%-10s%-4s%-10s\n","ID","NAME","PRICE","QTY","TOTAL");
		
		//while loop to check for item names length
		while (localIndex < borrowedItemNames.length) 
		{
			//selection structure to check for quantity
			if(borrowedOrderQuantities[localIndex] > 0) 
			{
				//print the report
				System.out.printf("%-4d%-24s%-2s%-8.2f%-4d%-2s%-8.2f\n",borrowedItemIDs[localIndex],borrowedItemNames[localIndex],"$",borrowedItemPrices[localIndex],borrowedOrderQuantities[localIndex],"$",borrowedOrderTotals[localIndex]);
				//increment local index
				localIndex++;
			}//end of if structure
		}//end of while loop
		
		//extra space
		System.out.println();
		//grand total
		System.out.println("GRAND TOTAL");
		System.out.printf("%-2s%-8.2f","$",borrowedGrandTotal);
		System.out.println("\n~~~ ~~~ ~~~ ~~~ ~~~ ~~~ ~~~ ~~~ ~~~ ~~~ ~~~ ~~~ ~~~\n");

	}//end of display report method
	
	//display out of stock method
	public static void displayOutOfStock() 
	{
		//out of stock error
		System.out.println("");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("OUT OF STOCK ERROR");
		System.out.println("The quantity entered is greater than the quantity in-stock");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("");
	}//end of method

	//display Account Results
	public static void displayAccountResults() 
	{
		//account results
		System.out.println("");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("ACCOUNT RESULTS");
		System.out.println("New account created");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("");
	}//end of method
	
	//display Account Results
	public static void displayAccountResults(String borrowedUserName) 
	{
		//account results
		System.out.println("");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("ACCOUNT RESULTS");
		System.out.println("Account not creaed: username, "+borrowedUserName+", already exists");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("");
	}//end of method
	
	//display login error method
	public static void displayLoginError() 
	{
		//login error
		System.out.println("");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("LOGIN ERROR");
		System.out.println("Username and/or Password is incorrect");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("");
	}//end of method
	
	//display not found method
	public static void displayNotFound() 
	{
		//out of stock error
		System.out.println("");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("NOT FOUND ERROR");
		System.out.println("The search value entered was not found");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("");
	}//end of method
	
	//display not opened method
	public static void displayNotOpen() 
	{
		//out of stock error
		System.out.println("");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("FILE ERROR");
		System.out.println("The file named was not found or could not be opened");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("");
	}//end of method

	//display record report method
	public static void displayRecordReport(int borrowedRecordCount) 
	{
		//out of stock error
		System.out.println("");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("RECORD REPORT");
		System.out.println(borrowedRecordCount+" records processed");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("");
	}//end of method
	
	//VR methods
	//get user name
	public static String getUserName(Scanner borrowedInput) 
	{
		//local variable to return
		String localString = "";
		
		//enter name
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("Please enter your name: ");
		
		//scanner input assign
		localString = borrowedInput.next();
		
		//thank you message
		System.out.println("Thank you for that "+localString+"!");
		System.out.println("Now to the program!\n");
		
		//return
		return localString;
		
		
	}//end of get user name method
	
	//get password
	public static String getPassword(Scanner borrowedInput) 
	{
		//local variable to return
		String localString = "";
		
		//enter password
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("Please enter your password: ");
		
		//scanner input assign
		localString = borrowedInput.next();
		
		//thank you message
		System.out.println("Thank you for that!");
		System.out.println("");
		
		//return
		return localString;
		
		
	}//end of get user name method
	
	//validate menu selection method
	public static char validateMenuSelection(Scanner borrowedInput) 
	{
		//local selection variable
		char localSelection = ' ';
		
		//displaying main menu
		displayMainMenu();
		
		//input local selection
		localSelection = borrowedInput.next().toUpperCase().charAt(0);
		
		//while loop to validate
		while (localSelection != 'A' && localSelection != 'B' && localSelection != 'Q') 
		{
			//display error
			System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
			System.out.println("You have entered incorrect choice");
			System.out.println("Please try again:");
			//display main menu
			System.out.println("");
			displayMainMenu();
			//input local selection
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
		}//end of while loop
		
		//return
		return localSelection;
	}//end of validating file selection method
	
	//validate file selection method
	public static char validateFileSelection(Scanner borrowedInput) 
	{
		//local selection variable
		char localSelection = ' ';
		
		//displaying file selection
		displayFileSelection();
		
		//input local selection
		localSelection = borrowedInput.next().toUpperCase().charAt(0);
		
		//while loop to validate
		while (localSelection != 'A' && localSelection != 'B' && localSelection != 'R') 
		{
			//display error
			System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
			System.out.println("You have entered incorrect choice");
			System.out.println("Please try again:");
			//display main menu
			System.out.println("");
			displayFileSelection();
			//input local selection
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
		}//end of while loop
		
		//return
		return localSelection;
	}//end of validating file selection method
	
	//validating howMany method
	public static String validateHowMany(Scanner borrowedInput) 
	{
		//declaring and initializing local variable
		String localHowMany = "";
		
		//input local how many
		System.out.println("\nHow many would you like of the product?");
		localHowMany = borrowedInput.next();
		
		//while loop to validate
		while (Integer.parseInt(localHowMany) <=0) 
		{
			//error
			System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
			System.out.println("Please enter a correct number ");
			
			//input
			localHowMany = borrowedInput.next();
		}//end of loop
		
		//return
		return localHowMany;	
	}//end of method
	
	//validating search value method
	public static int validateSearchValue(Scanner borrowedInput) 
	{
		//declaring and initializing local variable
		int localSearchValue = 0;
		
		//input local how many
		System.out.println("\nEnter the search value:");
		localSearchValue = borrowedInput.nextInt();
		
		//while loop to validate
		while (localSearchValue <=0) 
		{
			//error
			System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
			System.out.println("Please enter a correct number ");
			
			//input
			localSearchValue = borrowedInput.nextInt();
		}//end of loop
		
		//return
		return localSearchValue;	
	}//end of method
	
	//validate discount menu method
	public static char validateDiscountMenu(Scanner borrowedInput, String[] borrowedDiscountNames, double[] borrowedDiscountRates) 
	{
		//declaring and initializing local selection variable
		char localSelection = ' ';
		
		//display discount menu
		displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRates);
		
		//input selection
		localSelection = borrowedInput.next().toUpperCase().charAt(0);
		
		//while loop to validate
		while (localSelection != 'A' && localSelection != 'B' && localSelection != 'C') 
		{
			//error
			System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
			System.out.println("You have entered incorrect choice, please try again: ");
			
			//display discount menu
			displayDiscountMenu (borrowedDiscountNames, borrowedDiscountRates);
			
			//inputting local selection
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
			
		}//end of while loop
		
		//returning localSelection
		return localSelection;
	}//end of method
	
	//get file name method
	public static String getFileName(Scanner borrowedInput) 
	{
		//declaring and instantiating localFileName
		String localFileName = "";
		
		//extra space
		//display the menu
		System.out.println("");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("Enter the file name with extension (i.e. file.txt):");
		//assigning the input to localFileName
		localFileName = borrowedInput.next();
		//return
		return localFileName;
		
	}//end of method
}//end of main class

